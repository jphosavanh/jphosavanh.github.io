[{"name": "app.py", "content": "from shiny import App, Inputs, Outputs, Session, reactive, render, ui\nfrom shiny.types import FileInfo\nimport pandas as pd\nimport os\nimport shutil\nimport numpy as np\nimport re\nfrom faicons import icon_svg\nfrom datetime import datetime\nfrom pathlib import Path\n\nbase_df = pd.DataFrame(columns=['Delete', 'Unit', 'Staff', 'Activity', 'Role', 'Variation', 'Sick leave', 'On-campus', 'Units', 'Paycode', 'Scheduled start time', 'Scheduled start date', 'Scheduled weeks', 'Flex time', 'Unscheduled start date', 'Unscheduled weeks'])\n\ndef get_delete_button(row_index):\n    return ui.HTML(f\"<button rowid={row_index} onclick='Shiny.setInputValue(\\\"remove_row\\\",this.getAttribute(\\\"rowid\\\"))'>Delete</button>\")\n\napp_ui = ui.page_fluid(\n         \n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_file(\n                'staff_details', 'Staff details file', accept=['.csv'], multiple=False\n            ),\n            ui.output_ui(\n                'ui_unit'\n            ),\n            ui.output_ui(\n                'ui_staff_list_quick_select'\n            ),\n            ui.output_ui(\n                'ui_staff_list'\n            ),\n            ui.input_select(  \n                'activity',  \n                'Activity',  \n                {   \n                    'Teaching':     {\n                        'tut':          'Tutorial (first)',\n                        'retut':        'Repeat tutorial',\n                        'dem':        'Demonstration',\n                        'lec':          'Lecture (add paycode after)',\n                        'ST CONSULT':\t'Student consultation',\n                        'TEACHING':\t    'Teaching (generic - add paycode after)',\n                    },\n                    'MARKING':\t    'Marking',\n                    'ADMIN':\t    'Admin (emails, student forums, etc)',\n                    'MEETING':\t    'Meeting',\n                    'Other associated teaching': {\n                        'ACAD INTGY':\t'Academic integrity activities',\n                        'NON-C CLIN':\t'Non-contact clinical activities',\n                        'PREP':\t        'Preparation (non-associated working time)',\n                        'PRJ/RS SUP':\t'Project & research supervision',\n                        'REQ ATTNDN':\t'Required attendance',\n                        'ST RECRUIT':\t'Student recruitment',\n                        'TRAINING':\t    'Training',\n                        'TECH SUPPT':\t'Technical support',\n                    },\n                    'Unit development/coordination':{\n                        'COORD DUTY':\t'Subject coordination duties',\n                        'UOSMAT DEV':\t'Unit/material development',\n                    },\n                    'other_activity': 'Other (please specify below)',\n                 },\n                selected=None\n            ),\n            ui.output_ui(\n                'ui_other_activity'\n            ),\n            ui.input_select(  \n                'role',  \n                'Role',  \n                {\n                    'Use prefill': 'Use prefill',\n                    'Tutor': 'Tutor',\n                    'Marker': 'Marker',\n                    'Demonstrator': 'Demonstrator',\n                    'Lecturer': 'Lecturer',\n                    'Coordinator': 'Coordinator',\n                 },\n            ),\n            ui.input_select(  \n                'variation',  \n                'Variation reason',  \n                {\n                    'Additional work': 'Additional work',\n                    'Swap': 'Swap',\n                    'Replacement': 'Replacement',\n                    'other_reason': 'Other (please specify below)'\n                 },\n            ),\n            ui.output_ui(\n                'ui_other_reason'\n            ),\n            ui.input_radio_buttons(  \n                'sick_leave',  \n                'Sick leave?',  \n                {'N': 'No', 'Y': 'Yes'},  \n            ), \n            ui.input_radio_buttons(  \n                'on_campus',  \n                'On campus',  \n                {'Y': 'Yes', 'N': 'No'},  \n            ), \n            ui.input_numeric(  \n                'units',  \n                'Units (hours)',\n                value=0\n            ), \n            ui.input_radio_buttons(  \n                'scheduled',  \n                'Scheduled',  \n                {'Y': 'Yes', 'N': 'No'},  \n            ),\n            ui.output_ui(\n                'ui_scheduled_start_time'\n            ),\n            ui.output_ui(\n                'ui_scheduled_start_date'\n            ),\n            ui.output_ui(\n                'ui_scheduled_weeks'\n            ),\n            ui.output_ui(\n                'ui_flex'\n            ),\n            ui.output_ui(\n                'ui_unscheduled_start_date'\n            ),\n            ui.output_ui(\n                'ui_unscheduled_weeks'\n            ),\n            ui.input_action_button(\n                'add_button', 'Add entries', icon=icon_svg('plus')\n            ),\n        ),\n        ui.output_data_frame('render_df'),\n        ui.download_button('download', 'Download formatted Excel', icon=icon_svg('file-excel')),\n\n        ui.page_fixed(\n            ui.layout_columns(  \n                ui.card(  \n                    ui.card_header('User guide'),\n                    ui.HTML('''<ol>\n  <li>Upload the staff details csv file.</li>\n  <li>Enter the OTA entries on the left and click on Add entries.</li>\n  <li>Make edits in the table if necessary.</li>\n  <li>Download the formatted OTA table.</li>\n</ol> ''')\n                ),  \n                ui.card(  \n                    ui.card_header('Staff details template'),\n                    ui.p('This file should contain all staff member names, their PhD status and role.'),\n                    ui.p('You should name the file such that the first 8 characters are the UoS code.'),\n                    ui.download_button('download_template', 'Download template file', icon=icon_svg('download'))\n                ),  \n            )\n        )\n    )\n)\n\ndef server(input, output, session):\n  \n    @reactive.calc\n    def staff_file():\n        file: list[FileInfo] | None = input.staff_details()\n        if file is None:\n            return None\n        df = pd.read_csv(file[0]['datapath'])\n        # df.columns = ['Name', 'PhDStatus', 'Role']\n        df.set_index('Name', inplace=True)\n        return df    \n    \n    @reactive.calc\n    def guess_code():\n        file: list[FileInfo] | None = input.staff_details()\n        if file is None:\n            return None\n        possible = file[0]['name'][:8]\n        if re.match('[a-zA-Z]{4}[0-9]{4}', possible):\n            return possible.upper()\n        else:\n            return None\n    \n    @render.ui\n    def ui_staff_list_quick_select():\n        if staff_file() is not None:\n            return ui.input_checkbox_group(  \n                'roles_selected',  \n                'Staff (Quick select)',  \n                {  \n                    i: i for i in staff_file()['Role'].unique()\n                } | {'Unselect all' : 'Unselect all'},\n            ),\n    \n    @render.ui\n    @reactive.event(input.roles_selected, ignore_none=False)\n    def ui_staff_list():\n        if staff_file() is not None:\n            selected = [i for i in staff_file()[staff_file()['Role'].isin(input.roles_selected())].index]\n            if 'Unselect all' in input.roles_selected():\n                selected = []\n            return ui.input_checkbox_group(  \n                'staff_selected',  \n                'Staff',  \n                {  \n                    i: i for i in staff_file().index\n                },\n                selected=selected\n            ),\n    \n    @render.ui\n    def ui_unit():\n        return ui.input_text(\n            'unit', 'UoS Code', value=guess_code()\n        ),\n        \n    @render.ui\n    @reactive.event(input.activity)\n    def ui_other_activity():  \n        if input.activity() == 'other_activity':\n            return  ui.input_text(\n                'other_activity', 'Other activity'\n            )\n        \n    @render.ui\n    @reactive.event(input.variation)\n    def ui_other_reason():  \n        if input.variation() == 'other_reason':\n            return  ui.input_text(\n                'other_reason', 'Other variation reason'\n            )\n        \n    @render.ui\n    @reactive.event(input.scheduled)\n    def ui_scheduled_start_time():  \n        if input.scheduled() == 'Y':\n            return ui.input_text(\n                'scheduled_start_time', 'Start time (24-hour HHMM)'\n            )\n        \n    @render.ui\n    @reactive.event(input.scheduled)\n    def ui_scheduled_start_date():  \n        if input.scheduled() == 'Y':\n            return ui.input_date(\n                'scheduled_start_date', 'Start date:', format='dd/mm/yy'\n            )\n        \n    @render.ui\n    @reactive.event(input.scheduled)\n    def ui_scheduled_weeks():  \n        if input.scheduled() == 'Y':\n            return ui.input_text(\n                'scheduled_weeks', 'Weeks'\n            )\n\n    @render.ui\n    @reactive.event(input.scheduled)\n    def ui_flex():  \n        if input.scheduled() == 'N':\n            return ui.input_radio_buttons(  \n                'flex',  \n                'Flex-time',  \n                {'Y': 'Yes', 'N': 'No'},  \n            ),\n        \n    @render.ui\n    @reactive.event(input.flex)\n    def ui_unscheduled_start_date():  \n        if input.flex() == 'N':\n            return ui.input_date(\n                'unscheduled_start_date', 'Start date:', format='dd/mm/yy'\n            ),\n        \n    @render.ui\n    @reactive.event(input.flex)\n    def ui_unscheduled_weeks():  \n        if input.flex() == 'N':\n            return ui.input_text(\n                'unscheduled_weeks', 'Weeks'\n            ),  \n  \n    @render.text\n    def get_date():\n        return input.start_date()\n\n    current_df = reactive.value(base_df)\n    rows_added = reactive.value(0)\n\n    @reactive.effect    \n    @reactive.event(input.add_button)\n    def _():\n        current_df.set(render_df.data_view())\n        to_add = []\n        \n        for name in input.staff_selected():\n\n            phd_stat = staff_file().loc[name, 'PhDStatus']\n\n            if input.role() == 'Coordinator':\n                phd_stat = 'y'\n\n            if input.activity() == 'other_activity':\n                activity = input.other_activity()\n            else:\n                activity = input.activity()\n\n            if input.variation() == 'other_reason':\n                variation = input.other_reason()\n            else:\n                variation = input.variation()\n\n            if input.role() == 'Use prefill':\n                role = staff_file().loc[name, 'Role']\n            else:\n                role = input.role()\n\n            if input.activity() == 'MARKING':\n                code = 'M05'\n            elif input.activity() == 'tut':\n                activity = 'TEACHING (Tutorial)'\n                if role == 'Demonstrator':\n                    code = 'DE2'\n                else:\n                    code = 'TU2'\n            elif input.activity() == 'retut':\n                activity = 'TEACHING (Repeat tutorial)'\n                if role == 'Demonstrator':\n                    code = 'DE2'\n                else:\n                    code = 'TU4'\n            elif input.activity() == 'dem':\n                activity = 'TEACHING (demonstrating)'\n                code = 'DE2'\n            elif input.activity() == 'lec':\n                activity = 'TEACHING (lecture)'\n                code = ''\n            elif input.activity() == 'other_activity':\n                code = ''\n            else:\n                code = 'A02'\n            \n            if phd_stat.lower() == 'y' and len(code) > 1:\n                code = code[:-1] + str(int(code[-1]) - 1)\n\n            if input.scheduled() == 'Y':\n                unscheduled_flex = 'N'\n                unscheduled_start = 'NA'\n                unscheduled_weeks = 'NA'\n                scheduled_start_time = input.scheduled_start_time()\n                scheduled_start = input.scheduled_start_date().strftime('%d %b %Y')\n                scheduled_weeks = input.scheduled_weeks()\n\n            else:\n                scheduled_start_time = ''\n                scheduled_start = ''\n                scheduled_weeks = ''\n                if input.flex() == 'Y':\n                    unscheduled_flex = 'Y'\n                    unscheduled_start = 'NA'\n                    unscheduled_weeks = 'NA'\n                else:\n                    unscheduled_flex = 'N'\n                    unscheduled_start = input.unscheduled_start_date().strftime('%d %b %Y')\n                    unscheduled_weeks = input.unscheduled_weeks()\n                    \n\n            to_add.append((input.unit(), name, activity, role, variation, input.sick_leave(), input.on_campus(), input.units(), code, scheduled_start_time, scheduled_start, scheduled_weeks, unscheduled_flex, unscheduled_start, unscheduled_weeks))\n        \n        previous_df = current_df()\n        to_add_df = pd.DataFrame(to_add, columns=previous_df.columns[1:])\n        to_add_df['Delete'] = [get_delete_button(i) for i in range(rows_added(), rows_added() + to_add_df.shape[0])]\n        to_add_df['RowID'] = [i for i in range(rows_added(), rows_added() + to_add_df.shape[0])]\n        to_add_df.set_index('RowID', inplace=True)\n        to_add_df = to_add_df[previous_df.columns]\n        \n        new_df = pd.concat([previous_df, to_add_df])\n        current_df.set(new_df)\n        rows_added.set(rows_added() + new_df.shape[0])\n\n    @reactive.effect    \n    @reactive.event(input.remove_row)\n    def __():\n        remove_ind = int(input.remove_row())\n        new_df = render_df.data_view().drop(index=remove_ind)\n        current_df.set(new_df)\n\n    @render.data_frame\n    def render_df():\n        if input.add_button():\n            return render.DataGrid(\n                current_df(),\n                editable=True,\n                height=1000,\n            )\n        else:\n            return render.DataGrid(\n                base_df,\n            )\n        \n    @render_df.set_patch_fn\n    def _(*, patch: render.CellPatch) -> render.CellValue:\n        if patch['column_index'] in [7]:\n            return float(patch['value'])\n        return patch['value']\n\n    @render.download(filename=f'ota-{datetime.now().strftime(\"%Y-%m-%d-%H%M%S\")}.xlsx')\n    def download():\n        current_df.set(render_df.data_view())        \n        ota_path = os.path.join(os.path.dirname(__file__), 'base-ota.xlsx')\n        new_path = os.path.join(os.path.dirname(__file__), f'ota-{datetime.now().strftime(\"%Y-%m-%d-%H%M%S\")}.xlsx')\n        shutil.copy(ota_path, new_path)\n        def colour_phd(x, color):\n            return np.where(np.isin(x, (staff_file()[staff_file()['PhDStatus'] == 'Y']).index), f'color: {color};', None)\n        def border(x):\n            return 'border: solid thin'\n        with pd.ExcelWriter(new_path, mode='a', if_sheet_exists='overlay', engine='openpyxl') as writer:\n            current_df().iloc[:, 1:].style.apply(colour_phd, color='red', subset='Staff').applymap(border).to_excel(writer, index=False, header=False, sheet_name='Sheet1', startrow=3)\n        return new_path\n\n    @render.download(filename='UOSCODE-staff-details.csv')\n    def download_template():       \n        path = os.path.join(os.path.dirname(__file__), 'TEST1234-staff-details.csv')\n        return path\n    \napp = App(app_ui, server)\n", "type": "text"}, {"name": "TEST1234-staff-details.csv", "content": "Name,PhDStatus,Role\nAlice,Y,Tutor\nBob,N,Demonstrator\nCharlie,Y,Tutor\nDan,Y,Lecturer\nEve,Y,Coordinator\n", "type": "text"}, {"name": "base-ota.xlsx", "content": "", "type": "binary"}, {"name": "requirements.txt", "content": "openpyxl\n", "type": "text"}]